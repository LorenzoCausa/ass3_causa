<?xml version="1.0"?>
<launch>
  <include file="$(find exp_assignment3)/launch/simulation.launch"></include>
  
  <arg name="initial_joint_positions" doc="Initial joint configuration of the robot" default=" -J arm_base_to_base -1.57 -J arm_joint_01 0 -J arm_joint_02 3 -J arm_joint_03 -3 -J arm_joint_04 0"/>
  <arg name="paused" default="false"/>
  <arg name="gazebo_gui" default="true"/>
  <!-- send robot urdf to param server -->
  <param name="robot_description" command="xacro  '$(find exproblab_ass3)/urdf/my_robot.urdf'" />
  
  <!-- unpause only after loading robot model -->
  <arg name="unpause" value="$(eval '' if arg('paused') else '-unpause')" />
  
  <!-- push robot_description to factory and spawn robot in gazebo at the origin, change x,y,z arguments to spawn in a different position -->
  <arg name="world_pose" value="-x 0 -y -1 -z 0" />
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot $(arg unpause) $(arg world_pose) $(arg initial_joint_positions)"
    respawn="false" output="screen" />
    
  <!-- Load joint controller parameters for Gazebo -->
  <rosparam file="$(find moveit_ass3_pkg)/config/gazebo_controllers.yaml" />
  <!-- Spawn Gazebo ROS controllers -->
  
  <node name="gazebo_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint_state_controller" />
  <!-- Load ROS controllers -->
  
  <include file="$(find moveit_ass3_pkg)/launch/ros_controllers.launch"/>
  
  <!-- specify the planning pipeline -->
  <arg name="pipeline" default="ompl" />

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <!-- Allow user to specify database location -->
  <arg name="db_path" default="$(find moveit_ass3_pkg)/default_warehouse_mongo_db" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <!-- By default, we will load or override the robot_description -->
  <arg name="load_robot_description" default="false"/>

  <!-- Set execution mode for fake execution controllers -->
  <arg name="fake_execution_type" default="interpolate" />

  <!-- By default, hide joint_state_publisher's GUI in 'fake' controller_manager mode -->
  <arg name="use_gui" default="false" />
  <arg name="use_rviz" default="true" />

  <!-- If needed, broadcast static tf for robot root -->


    <!-- We do not have a real robot connected, so publish fake joint states via a joint_state_publisher
         MoveIt's fake controller's joint states are considered via the 'source_list' parameter -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg use_gui)">
      <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
    </node>
    <!-- If desired, a GUI version is available allowing to move the simulated robot around manually
         This corresponds to moving around the real robot without the use of MoveIt. -->
    <node name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" if="$(arg use_gui)">
      <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
    </node>

    <!-- Given the published joint states, publish tf for the robot links -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find moveit_ass3_pkg)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution_type" value="$(arg fake_execution_type)"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="pipeline" value="$(arg pipeline)"/>
    <arg name="load_robot_description" value="$(arg load_robot_description)"/>
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(find moveit_ass3_pkg)/launch/moveit_rviz.launch" if="$(arg use_rviz)">
    <arg name="rviz_config" value="$(find exproblab_ass3)/config/my_config.rviz"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  

  <node name="final_oracle" pkg ="exp_assignment3" type="final_oracle" /> 
  <node name="move_arm" pkg="exproblab_ass3" type ="move_arm.py"/>
  <node name="marker_publisher" pkg ="aruco_ros" type="marker_publisher" args="/image:=/robot/camera1/image_raw"/> 
  
</launch>
